
 ----------------------------------------------------------------------

 The contents of this directories are not ready for use.

 ----------------------------------------------------------------------


 * eg-06.S	    Like eg-05.S, but modified to manipulate 16-bit registers.

   		    Here we implement the same algorithm as in eg-05.S, but
		    with an alternative code to read and write in both 8-bit
		    registers ah and al by means of manipulating the 16-bit
		    register ax, rather than accessing its higher and lower
		    bytes of directly. 

		    The main reason for doing this, despite the need of some
		    gimmick with bitwise logic operation and an extra register,
		    is because we intend to port our source code from assembly
		    to C and use GNU toolchain to build it.

		    See note (3) for a glimpse on how it would look like

		    It so happens that GCC does not do a good job working with
		    8-bit registers. As we are taking steps to convert our
		    assembly example into C, limitation will eventually get in
		    our way when we start to experiment with C inline assembly.

		    See note (4) to better understand the issue.
		    		    
		    In order to overcome the limitation, we'd better modify
		    our code to manipulate only 16-bit registers.		    

		    Build eg-06.bin and inspect it with

		       make diss IMG=eg-06.bin 32

		    Why are we forcing the disassemble to interpret the object
		    as a 32-bit code? Because GAS assumes this code should
		    be interpreted as a i8086 (16-bit) binary intended to run
		    in a i386 (32-bit) machine (see note 3).


* eg-07-beta.c	    Like eg-06.S, but translated into C.

   		    We use basic inline assembly. GCC should copy the asm code
		    as is to the output asm.

		    We declared the function with attribute 'naked' to prevent
		    GCC from generating extra asm code which is not relevant
		    here and may be omitted for readability. See comments
		    in the source file.

		    NOTE: There are some weightly concerns about this technique
		    to be addressed in the following examples.

		    Observe that the string is now allocated in the read-only
		    section of the object code --- and also the ad hoc
		    workaround (aka dirty hack) we used (see comments in
		    the source file).

		    Alternatives:

		    b) Issuing the build rule with the command-line variable
		    ALT=1 selects an alternative recipe using a linker
		    script which stands in for some of the compiler's and
		    linker's flags, in particular, the instructions to
		    generate flat binary, set entry point and copy only
		    the code (.text) section to the output.

		    a) Issuing the build rule with the command-line variable
		    ALT=2 selects an alternative recipe using a single line
		    compiler (gcc) invocation. Note that now we need
		    to use gcc's option -nostdlib.

---

 (3)  The ISO C standard specifies the support for the insertion of
      assembly code within the body of a C source code, by means
      of a feature referred to as inline assembly.

      GCC supports inline assembly through the declaration

      __asm__ ("string");

      where "string" is a piece of assembly code. GCC does not
      interpret the contents of the string and output it as is
      in the produced assembly.

      See egx-01.c for an example.

      The code illustrates the user of the qualified 'register' to
      force a variable to allocated in a register rather than in
      work memory (RAM) as it's normally done.  This allows us
      to store a value in the register using the regular variable
      attribution syntax.

      Build it and disassembly with

         make diss IMG=eg-03.bin



 (4) Put short, GCC toolchain is not currently proficient in producing
      propper object code from C inline assembly source code intended
      to manipulate 8-bit registers directly, that is

      register char ax __asm__("ax");

      does not work as expected.

      In order to dig into this issue, it's first useful to understand
      how 8, 16 and 32-bit registers are handled by the x86 architecture.

      Consider either example egx-02-32bit.S, in GAS dialect or, alternatively,
      exg-04-32bit.asm, an equivalent in NASM dialect. The result of the
      experiment should be the same.

      The program instructs the assembler to generate code for a 32-bit
      (x86) CPU. The object code is supposed to store arbitrary values
      in ah, ax and eax.

      Build it and inspect the output with

         make diss IMG=egx-02-32bit-nasm.bin

         or

         make diss IMG=egx-02-32bit-gas.bin


      The output should identical:

         0:	b4 01                	mov    $0x1,%ah
   	 2:	66 b8 02 00          	mov    $0x2,%ax
   	 6:	b8 03 00 00 00       	mov    $0x3,%eax

      Line 0 uses opcode 0xb4 to store 1 in ah; the same we've got when
      we compiled eg-04.asm or eg-05.S. This instruction takes 1 byte
      as argument.

      Line 6 uses the opcode 0xb8 to store 3 in eax. This instruction takes
      4 bytes as argument.

      Now look at line 6. It is supposed to store 2 in ax and needs 2 bytes
      as argument. This would sum up 3 bytes, but the line is 4-bytes long.
      Staring at the last byte in the line and moving backwards, we can
      clearly identify the instruction 0xb8, the same as in line 6, and
      the 2-byte representation of 0x2 in little endian.

      But as we've seen, 0xb8 takes 4-bytes and store in eax. What is
      happening here? Well, look at the first byte at line 2, the one
      preceding the 0xb8 instruction. It is a instruction prefix.
      More specifically, 0x66 is a "Operand size overwrite" prefix.
      Its effect is to toggle the normal (non-prefixed) length of the
      next instruction's argument. In this case, from 32-bit to 16-bit.

      This is how the 32-bit x86 architecture stores a value in a 16-bit
      register in our example. While for ah and eax the assembler uses
      different opcodes for the respective operations, for ax it uses
      the same instruction that is used for eax, but with a operand
      size overwrite prefix.

      Now let's do the same thing with egx-02-16bit.asm.

         make diss IMG=egx-02-32bit-nasm.bin 16

         or

         make diss IMG=egx-02-32bit-gas.bin 16

      The only different from the previous 32bit versions is the directive
      to select 16 bits, but the disassembly shows
      

         0:	b4 01                	mov    $0x1,%ah
   	 2:	b8 02 00             	mov    $0x2,%ax
   	 5:	66 b8 03 00 00 00    	mov    $0x3,%eax

      Compare to the previous result:

         0:	b4 01                	mov    $0x1,%ah
   	 2:	66 b8 02 00          	mov    $0x2,%ax
   	 6:	b8 03 00 00 00       	mov    $0x3,%eax

      Line 0 has not changed.

      Line 2, however, has. It lost the operand size overwrite prefix, which
      passed to the line 6.

      This time, we told the assembler we were targeting a 16-bit (8080)
      CPU. Instruction 0xb4 works as usual. But now the normal (non-prefixed)
      default argument length of 0xb8 is 2-bytes (16 bits). It's the manipulation
      of eax (32 bits) that need the operand size overwrite prefix.

      Why x86 code reuses the same instruction to move to ax and eax, by means
      of prefixes, rather than having a specific instruction for each? This is
      a design decision. But it's not hard to notice that eax and ax are,
      after all, portions of the same 64-bit register found in x86_64. It may
      make sense from the hardware design perspective.
      
      Well, so far so good.

      But what is the problem with manipulating 8-bit registers with inline
      assembly anyway?

      Now GCC's own quirks come into play.

      Consider the example egx-07.c.

      We use inline assembly to force the variables to be allocated into
      registers (see note 3a).

      Now build and inspect with

         make egx-07-16bit.bin/diss 16

         0:	66 bb 01 00 00 00    	mov    $0x1,%ebx
   	 6:	66 b8 02 00 00 00    	mov    $0x2,%eax
   	 c:	66 b8 03 00 00 00    	mov    $0x3,%eax
  	 12:	66 b8 04 00 00 00    	mov    $0x4,%eax
  	 18:	90                   	nop
  	 19:	0f 0b                	ud2    

	 
      Line 0 uses 0x66 prefix to store the next 4 bytes in bx, discarding
      the remaining two. Line 6 does the same with for ax.

      Now see line c. It should store 1 byte in ah. However it's just another
      0xb8 move instruction prefixed to store the next two bytes in eax.
      The same as 'mov $0x3, ax'. Line 12, likewise, will store in eax,
      overriding anything we had put in ah in the previous step.

      If we had written the assembly manually as in egx-02, we would have used
      'mov $0x3, %ah' and this would have resulted in a 0xb4 instruction as before.

      But this is not what GCC itself does. Just build both the 16 and 32-bit
      versions of the same example

      	 make egx-07-32bit.bin

      	 make egx-07-16bit.bin

      And see the generated assembly files

        cat egx-07-32.bit.s
        cat egx-07-16.bit.s
	
      or

        diff egx-07-32.bit.s egx-07-16.bit.s
     

      and observe that the only different is the directive .cod116gcc.

      As we can notice, GCC always use the 32-bit registers and rely on GAS
      to honor the 16-bit directive.

      We can see the result by comparing

      	 make egx-07-16bit.bin/diss 16
      	 make egx-07-32bit.bin/diss 32


      The conclusion is that the code is not honoring what the C source says.
      This is a known issue and not exactly a bug, seen that GCC does not
      even claim the support to operate with 8-bit register variables. We
      are pushing it too hard.  There are other C compilers out there
      which do support this kind of operation, but if we are to explore
      GCC, we should avoid manipulating 8-bit register variables.


* eg-08.c	    A complete rewrite of eg-07.c with safer code.

   		    Using register variables and basic C inline assembly as
		    in eg-07.c seems appealing at first glance... but in
		    a dangerous way. The example did work, but only because
		    certain rather restrictive conditions hold.

		    To have an intuitive grasp on the potential problem,
		    refer to note (5).

		    The example, although (hopefully) working, is error prone
		    and generally not a good idea.

		    This is rewrite of eg-07.c using simple asm encapsulated
		    as function-like macros.

		    The macro usage has some limitations which are overcome
		    in the examples which follow.

(5)   Consider program egx-05.c.

      If we trust that register variables can be safely manipulated as
      regular memory-allocated variables, we would expect that by the
      end of the program we have 0x1 stored in eax and 0x2 stored in ebx.
      
      This is 32-bit program. What could possible go wrong.

      To answer the question you may

      	 make egx-05.bin/run

      and then, in qemu, press Ctr-Alt-2 to invoke the debug console.
      Then type

         print $eax
	 print $ebx

      to inspect the values stored in the registers: both have 0x2.

      Why is that?  Make

         make eg-05.bin/diss 32

      and go through the diassembly

            0:	b8 01 00 00 00       	mov    $0x1,%eax
   	    5:	83 c0 01             	add    $0x1,%eax
   	    8:	89 c3                	mov    %eax,%ebx


      Line 0 implements the C source statement

      	   eax = 1;

      In order to implement the next C statement

           ebx = eax + 1;

      line 5 first add 1 to eax, and then move eax to ebx.

      The compiler has absolutely no obligation to fulfill our expectations
      regarding the assembly it generates. It might well had made

      	   mov $0x01, %eax
	   mov %eax, %ebx
	   add $0x1, %ebx

     and we would have 1 in eax, and 2 in ebx. But the compiler is free
     to choose whatever assembly it feels like, as long as the attributions
     we specified are correct. The analogy with memory variables is a
     potentially misleading idea if not reasoned with due care.

     Usually, we use basic inline assembly withing C functions only when
     assembly is the only code withing the function.

     That said, GCC has support for another form of inline assembly
     called extended nasm, which allow for mixing C and assembly
     with the due meticulous care.
