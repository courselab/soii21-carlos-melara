 OVERVIEW
 ------------------------------

 In order to experiment with the examples in this section, the following
 pieces of software are required. The version indication lists those with
 which the project was tested. Using a more recent version should be
 ok, but it is not absolutely guaranteed that results may exhibit minor
 variations. Feedback is always appreciated.

 - GCC           9.3.0
 - binutils      2.34

  BUILD DIRECTIONS
 ------------------------------

 Use

   make foo                                  build foo

   make diss IMG=foo                         disassemble name

   make                                      build everything (or make all)

   make clean                                undo make all

 Some examples allow alternative build recipes which can be selected
 by passing the command-line variable ALT=<number> to make. See bellow.


     asm                indicates manually written assembly code in
                        Intel ASM format;

     S                  indicates manually written assembly code
                        in AT&T Gas format;

     s                  indicates assembly code in AT&T Gas format
                        generated by the compiler (GCC);

     o                  indicates object code produced by the assembler;

     bin                indicates binary file generated by the
                        compiler /linker;

     ld                 indicates a linker script.


 CONTENTS
 ------------------------------

 Take a look at the following examples.



 * eg-01.c          Very simple program to exemplify the build steps.

   		    Execute

		      make eg-01.i           to produce the preprocessed source
		      make eg-01.s           to produce the assembly
		      make eg-01.o	     to produce the object code
		      make eg-01	     to produce the binary

		      ls eg-01.s	     to inspect the assembly
		      make diss IMG=eg-01.o  to disassemble the object
		      make diss IMG=eg-01    to disassemble the executable

 * eg-02.c	    A C program containing one single compilation unity.

		    Build and execute the binary, and thencheck the return
		    status with.

		      echo $?

 * eg-03-alpha.c    Same as eg-02.c, but implementing functions afeter main().

		    Build the binary. You should see a warning about 
		    implicit function declarations.

 * eg-03.c	    Same as eg-03l-alpha, but with function declarations
   		    before main().

		    Build the binary and see that the issue is fixed.

 * eg-04.c	    Same as eg-03.c, but with declarations in a separate
   		    header file.

		    File eg-04.h is provided.
		    
		    Build the proprocessing translated unity with

 		       make eg-04.i

		    and compare with the source eg-02.c to see that the
		    processor directives have been resolved.

 * eg-05.c	    A program to illustrate the translation units

   		    Source eg-05.c calls an external function, which is
		    declared in eg-07.h.

		    Build the translation unit eg-05.i with

		       make eg-05.i

		    and inspect its contents with 'cat' to verify the
		    inclusions were resolved and macros have been expanded.


 * eg-06.c	    Like eg-03.c, but split into several translation units

   		    Build eg-06 with

		      make eg-06

		    and see the intermediate build steps which invoque the
		    preprocessor, compiler, assembler ane kinker.

		    Then build with

		      make eg-06 ALT=1

                    and see that this time we build the objects, create
		    a static library and then build the binary by linking
		    its object agains the library
		    
		    Yet, build with
 
		      make eg-06 ALT=2


		    This time, libeg-06.a includes another object file, baz.o,
		    definint the symbol baz.

		    Run


		    meld <(make clean && make eg-06 ALT=1 && nm libeg-06.a) \
		         <(make clean && make eg-06 ALT=2 && nm libeg-06.a)

	            to compare both libraries.  Then, run

		    meld <(make clean && make eg-06 ALT=1 && nm eg-06) \
		         <(make clean && make eg-06 ALT=2 && nm eg-06)
		    

                    and see that baz is not included in the binary.

		    Also, compare the disassembly to make it sure
		    
		    meld <(make clean && make eg-06 ALT=1 && objdump -d eg-06)\
		         <(make clean && make eg-06 ALT=2 && objdump -d eg-06)

		    